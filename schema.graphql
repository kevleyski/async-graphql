# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: QueryRoot
}

interface Character {
    appearsIn: [Episode!]!
    friends: [Character!]!
    id: String!
    name: String!
}

"A mechanical creature in the Star Wars universe."
type Droid implements Character {
    "Which movies they appear in."
    appearsIn: [Episode!]!
    "The friends of the droid, or an empty list if they have none."
    friends: [Character!]!
    "The id of the droid."
    id: String!
    "The name of the droid."
    name: String!
    "The primary function of the droid."
    primaryFunction: String
}

type DroidConnection {
    "A list of edges."
    edges: [DroidEdge]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type DroidEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: Droid!
}

"A humanoid creature in the Star Wars universe."
type Human implements Character {
    "Which movies they appear in."
    appearsIn: [Episode!]!
    "The friends of the human, or an empty list if they have none."
    friends: [Character!]!
    "The home planet of the human, or null if unknown."
    homePlanet: String
    "The id of the human."
    id: String!
    "The name of the human."
    name: String!
}

type HumanConnection {
    "A list of edges."
    edges: [HumanEdge]
    "Information to aid in pagination."
    pageInfo: PageInfo!
}

"An edge in a connection."
type HumanEdge {
    "A cursor for use in pagination"
    cursor: String!
    "The item at the end of the edge"
    node: Human!
}

"Information about pagination in a connection"
type PageInfo {
    "When paginating forwards, the cursor to continue."
    endCursor: String
    "When paginating forwards, are there more items?"
    hasNextPage: Boolean!
    "When paginating backwards, are there more items?"
    hasPreviousPage: Boolean!
    "When paginating backwards, the cursor to continue."
    startCursor: String
}

type QueryRoot {
    droid(
        "id of the droid"
        id: String!
    ): Droid
    droids(after: String, before: String, first: Int, last: Int): DroidConnection!
    hero(
        "If omitted, returns the hero of the whole saga. If provided, returns the hero of that particular episode."
        episode: Episode!
    ): Character!
    human(
        "id of the human"
        id: String!
    ): Human
    humans(after: String, before: String, first: Int, last: Int): HumanConnection!
}

"One of the films in the Star Wars Trilogy"
enum Episode {
    "Released in 1980."
    EMPIRE
    "Released in 1983."
    JEDI
    "Released in 1977."
    NEW_HOPE
}
